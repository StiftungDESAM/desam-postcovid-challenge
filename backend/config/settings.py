"""
Django settings for postcovid project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import logging.config
import os
from pathlib import Path
from neomodel import config
import sys
from .utils import str_to_bool,str_to_list
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = os.path.join(BASE_DIR, 'logs')
# Erstelle den Ordner, falls er nicht existiert


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{levelname}] {funcName}: {message}',
            'style': '{'
        },
        'detailed': {
            'format': '[{levelname}] {asctime} {module}.{funcName}: {message}',
            'style': '{'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'simple'
        },
        'rotating_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'general.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'level': 'DEBUG',
            'formatter': 'detailed'
        },
        'rotating_file2': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'general_mw.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'level': 'INFO',
            'formatter': 'detailed'
        }
    },
    'loggers': {
        'root': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'handlers': ['console', 'rotating_file', 'rotating_file2']
        }
    }
}
logging.config.dictConfig(LOGGING)

# Disables the annoying Neo4j DEBUG/INFO log spam.
neo4j_log = logging.getLogger("neo4j")
neo4j_log.setLevel(logging.WARNING)

# For Django to find the apps in the custom subfolder "apps"
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
DEBUG = str_to_bool(os.environ.get("DJANGO_DEBUG_MODE", "False"))
BASE_URL = os.environ.get("BASE_URL")

ALLOWED_HOSTS = ["localhost", "127.0.0.1", "backend"]



#CSRF_TRUSTED_ORIGINS = [
#    "http://127.0.0.1",
#    "http://localhost",
#]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ontology.apps.OntologyConfig',
    'knowledge.apps.KnowledgeConfig',
    'graph_migrations.apps.GraphMigrationsConfig',
    'api.apps.ApiConfig',
    'authentication.apps.AuthenticationConfig',
    'reviewer.apps.ReviewerConfig',
    # 'rest_framework',
    # 'rest_framework.authtoken',
    'study.apps.StudyConfig'
]

# set the custom user model
AUTH_USER_MODEL = 'authentication.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('SQL_ENGINE'),
        'NAME': os.environ.get('SQL_DATABASE'),
        'USER': os.environ.get('SQL_USER'),
        'PASSWORD': os.environ.get('SQL_PASSWORD'),
        'HOST': os.environ.get('SQL_HOST'),
        'PORT': os.environ.get('SQL_PORT'),
        'ATOMIC_REQUESTS': True,
    }
}

# Neo4j
config.DATABASE_URL = os.environ.get("NEO4J_BOLT_URL")





# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Token validation
AUTH_TOKEN_EXPIRY_TIME = 60 * 60 * 24  # 24 hours

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'de'
TIME_ZONE = 'Europe/Berlin'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
APPEND_SLASH = True


CSRF_COOKIE_SECURE = str_to_bool(os.environ.get('CSRF_COOKIE_SECURE', 'False'))
CSRF_TRUSTED_ORIGINS = [os.environ.get("DOMAIN", "http://localhost"), "http://localhost:8010", "http://172.12.0.1:8010", "http://192.168.0.133:8010"]
SESSION_COOKIE_SECURE = str_to_bool(os.environ.get('SESSION_COOKIE_SECURE', 'False'))


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_ENABLE = str_to_bool(os.environ.get('EMAIL_ENABLE', "False"))
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = os.environ.get('EMAIL_PORT', 2525)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = str_to_bool(os.environ.get('EMAIL_USE_TLS', "False"))
EMAIL_USER_SSL = str_to_bool(os.environ.get('EMAIL_USE_SSL', "False"))
EMAIL_SENDER = os.environ.get("EMAIL_SENDER")